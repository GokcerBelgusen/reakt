{
  "name": "Reakt",
  "tagline": "Reactive interfaces. Promises, Streams, Callbacks, Async results, interfaces for Java that are lambda expression friendly and fluent.",
  "body": "# reakt [![Build Status](https://travis-ci.org/advantageous/reakt.svg)](https://travis-ci.org/advantageous/reakt) [![Join the chat at https://gitter.im/advantageous/reakt](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/advantageous/reakt?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nReactive interfaces for Java.\r\n\r\nReakt is reactive interfaces for Java: \r\n * Promises, \r\n * Streams, \r\n * Callbacks, \r\n * Async results\r\n \r\nThe emphasis is on defining interfaces that enable lambda expressions, \r\nand fluent APIs for asynchronous programming for Java.\r\n\r\n\r\nNote: This mostly just provides the interfaces not the implementations. There are some starter implementations but the idea is that anyone can implement this. It is all about interfaces. There will be adapters for Vertx, RxJava, Reactive Streams, Guava Async Futures, etc.\r\n\r\n#### Fluent Promise API\r\n```java\r\n\r\n  Promise<Employee> promise = promise()\r\n                .then(e -> saveEmployee(e))\r\n                .catchError(error -> \r\n                     logger.error(\"Unable to lookup employee\", error));\r\n\r\n  employeeService.lookupEmployee(33, promise);\r\n```\r\n\r\nOr you can handle it in one line. \r\n\r\n#### Fluent Promise API example 2\r\n```java\r\n\r\n\r\n  employeeService.lookupEmployee(33, \r\n        promise().then(e -> saveEmployee(e))\r\n                 .catchError(error -> logger.error(\r\n                                           \"Unable to lookup \", error))\r\n        );\r\n```\r\n\r\n\r\nPromises are both a callback and a Result; however, you can work\r\nwith Callbacks directly. \r\n\r\n#### Using Result and callback directly\r\n```java\r\n        employeeService.lookupEmployee(33, result -> {\r\n            result.then(e -> saveEmployee(e))\r\n                  .catchError(error -> {\r\n                    logger.error(\"Unable to lookup\", error);\r\n            });\r\n        });\r\n```\r\n\r\nIn both of these examples, lookupService would look like:\r\n\r\n#### Using Result and callback directly\r\n```java\r\n\r\n   public void lookup(long employeeId, Callback<Employee> callback){...}\r\n\r\n```\r\n\r\n\r\n\r\n***QBit version 2*** is going to use ***Reakt***.\r\n***Connekt***, a slimmed down fork of Vert.x, will also use ***Reakt***. \r\n\r\nSee [QBit](https://github.com/advantageous/qbit) micorservies lib \r\nfor more details.\r\n\r\nSee our wiki for more details on [Reakt](https://github.com/advantageous/reakt/wiki).\r\n\r\n\r\n## Further reading\r\n\r\n[What is Microservices Architecture?](http://www.mammatustech.com/microservices-architecture)\r\n\r\n[QBit Java Micorservices lib tutorials](https://github.com/MammatusTech/qbit-microservices-examples/wiki)\r\n\r\nThe Java microservice lib. QBit is a reactive programming lib for building microservices - JSON, HTTP, WebSocket, and REST. QBit uses reactive programming to build elastic REST, and WebSockets based cloud friendly, web services. SOA evolved for mobile and cloud. ServiceDiscovery, Health, reactive StatService, events, Java idiomatic reactive programming for Microservices.\r\n\r\n[Find more tutorial on QBit](https://github.com/MammatusTech/qbit-microservices-examples/wiki).\r\n\r\n\r\n[Reactive Programming](http://rick-hightower.blogspot.com/2015/03/reactive-programming-service-discovery.html), [Java Microservices](http://rick-hightower.blogspot.com/2015/03/java-microservices-architecture.html), [Rick Hightower](http://www.linkedin.com/in/rickhigh)\r\n\r\n\r\n\r\n[High-speed microservices consulting firm and authors of QBit with lots of experience with Vertx - Mammatus Technology](http://www.mammatustech.com/)\r\n\r\n[Highly recommended consulting and training firm who specializes in microservices architecture and mobile development that are already very familiar with QBit and Vertx as well as iOS and Android - About Objects](http://www.aboutobjects.com/)\r\n\r\n[Java Microservices Architecture](http://www.mammatustech.com/java-microservices-architecture)\r\n\r\n[Microservice Service Discovery with Consul] (http://www.mammatustech.com/Microservice-Service-Discovery-with-Consul)\r\n\r\n[Microservices Service Discovery Tutorial with Consul](http://www.mammatustech.com/consul-service-discovery-and-health-for-microservices-architecture-tutorial)\r\n\r\n[Reactive Microservices]\r\n(http://www.mammatustech.com/reactive-microservices)\r\n\r\n[High Speed Microservices]\r\n(http://www.mammatustech.com/high-speed-microservices)\r\n\r\n[Java Microservices Consulting](http://www.mammatustech.com/java-microservices-consulting)\r\n\r\n[Microservices Training](http://www.mammatustech.com/java-reactive-microservice-training)\r\n\r\n\r\n[Reactive Microservices Tutorial, using the Reactor]\r\n(https://github.com/MammatusTech/qbit-microservices-examples/wiki/Reactor-tutorial--%7C-reactively-handling-async-calls-with-QBit-Reactive-Microservices)\r\n\r\n[QBit is mentioned in the Restlet blog](http://restlet.com/blog/2015/09/04/this-week-in-api-land-20/)\r\n\r\n[All code is written using JetBrains Idea - the best IDE ever!](https://www.jetbrains.com/idea/)\r\n\r\nAdded travis support.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}